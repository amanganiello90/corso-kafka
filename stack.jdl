application {
    config {
    baseName gateway,
    packageName com.example.developer.gateway,
    applicationType gateway,
    authenticationType oauth2,
    prodDatabaseType postgresql,
    serviceDiscoveryType eureka,
    testFrameworks []
    }
    entities Pharmacy, AlertMess, Notification
}

application {
    config {
    baseName pharmacy,
    packageName com.example.developer.pharmacy,
    applicationType microservice,
    authenticationType oauth2,
    prodDatabaseType postgresql,
    serverPort 8082,
    serviceDiscoveryType eureka
    messageBroker kafka
    }
    entities Pharmacy
    dto * with mapstruct
    service * with serviceClass
}

application {
    config {
    baseName alert,
    packageName com.example.developer.alert,
    applicationType microservice,
    authenticationType oauth2,
    serverPort 8083,
    serviceDiscoveryType eureka
    messageBroker kafka
    }
    entities AlertMess
    dto * with mapstruct
    service * with serviceClass
}

application {
    config {
    baseName notification,
    packageName com.example.developer.notification,
    applicationType microservice,
    authenticationType oauth2,
    serverPort 8084,
    serviceDiscoveryType eureka
    messageBroker kafka
    }
    entities Notification
    dto * with mapstruct
    service * with serviceClass
}

enum PharmacyStatus {
OPEN,
CLOSED
}

entity Pharmacy {
name String required,
address String required,
status PharmacyStatus,
createTimestamp Instant required,
updateTimestamp Instant
}

entity AlertMess {
pharmacyName String required,
pharmacyStatus String required,
timestamp Instant required
}

entity Notification {
pharmacyName String required,
notificatedTimestamp Instant required
}

microservice Pharmacy with pharmacy
microservice AlertMess with alert
microservice Notification with notification
